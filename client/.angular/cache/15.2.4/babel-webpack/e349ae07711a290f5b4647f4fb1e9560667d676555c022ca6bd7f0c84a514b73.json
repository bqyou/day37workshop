{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/camera.service\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function () {\n  return [\"/\"];\n};\nexport class UploadComponent {\n  constructor(router, cameraSvc, fb) {\n    this.router = router;\n    this.cameraSvc = cameraSvc;\n    this.fb = fb;\n    this.imageData = \"\";\n  }\n  ngOnInit() {\n    if (!this.cameraSvc.imageData) {\n      this.router.navigate(['/']);\n      return;\n    }\n    this.imageData = this.cameraSvc.imageData;\n    this.form = this.fb.group({\n      title: this.fb.control(''),\n      complain: this.fb.control('')\n    });\n    this.blob = this.dataURItoBlob(this.imageData);\n  }\n  dataURItoBlob(dataURI) {\n    var byteString = atob(dataURI.split(',')[1]);\n    let mimeString = dataURI.split(',')[0].split(';')[0];\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) ia[i] = byteString.charCodeAt(i);\n    return new Blob([ab], {\n      type: mimeString\n    });\n  }\n  upload() {\n    const formVal = this.form.value;\n    this.cameraSvc.upload(formVal, this.blob).then(result => {\n      this.router.navigate(['/']);\n    });\n  }\n}\nUploadComponent.ɵfac = function UploadComponent_Factory(t) {\n  return new (t || UploadComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.CameraService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadComponent,\n  selectors: [[\"app-upload\"]],\n  decls: 21,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"thumbnail\", 3, \"src\"], [\"type\", \"text\", \"size\", \"30\", \"formControlName\", \"title\"], [\"cols\", \"30\", \"rows\", \"4\", \"formControlName\", \"complain\"], [\"type\", \"button\", 3, \"routerLink\"], [\"type\", \"submit\"]],\n  template: function UploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.upload();\n      });\n      i0.ɵɵelementStart(1, \"table\")(2, \"tr\")(3, \"td\");\n      i0.ɵɵelement(4, \"img\", 1);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"tr\")(6, \"td\");\n      i0.ɵɵtext(7, \"Title: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"td\");\n      i0.ɵɵelement(9, \"input\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"tr\")(11, \"td\");\n      i0.ɵɵtext(12, \"Complain: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"td\");\n      i0.ɵɵelement(14, \"textarea\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"tr\")(16, \"td\")(17, \"button\", 4);\n      i0.ɵɵtext(18, \"Back\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 5);\n      i0.ɵɵtext(20, \"Upload\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"src\", ctx.imageData, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c0));\n    }\n  },\n  dependencies: [i1.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;AAUA,OAAM,MAAOA,eAAe;EAK1BC,YAAoBC,MAAc,EAAUC,SAAwB,EACtDC,EAAe;IADT,WAAM,GAANF,MAAM;IAAkB,cAAS,GAATC,SAAS;IACvC,OAAE,GAAFC,EAAE;IALhB,cAAS,GAAC,EAAE;EAKmB;EAE/BC,QAAQ;IACN,IAAG,CAAC,IAAI,CAACF,SAAS,CAACG,SAAS,EAAC;MAC3B,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B;;IAEF,IAAI,CAACD,SAAS,GAAG,IAAI,CAACH,SAAS,CAACG,SAAS;IACzC,IAAI,CAACE,IAAI,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACxBC,KAAK,EAAE,IAAI,CAACN,EAAE,CAACO,OAAO,CAAS,EAAE,CAAC;MAClCC,QAAQ,EAAE,IAAI,CAACR,EAAE,CAACO,OAAO,CAAS,EAAE;KACrC,CAAC;IAEF,IAAI,CAACE,IAAI,GAAG,IAAI,CAACC,aAAa,CAAC,IAAI,CAACR,SAAS,CAAC;EAEhD;EAEAQ,aAAa,CAACC,OAAe;IAC3B,IAAIC,UAAU,GAAGC,IAAI,CAACF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAIC,UAAU,GAAGJ,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD,IAAIE,EAAE,GAAG,IAAIC,WAAW,CAACL,UAAU,CAACM,MAAM,CAAC;IAC3C,IAAIC,EAAE,GAAG,IAAIC,UAAU,CAACJ,EAAE,CAAC;IAC3B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACT,UAAU,CAACM,MAAM,EAAEG,CAAC,EAAE,EACtCF,EAAE,CAACE,CAAC,CAAC,GAAGT,UAAU,CAACU,UAAU,CAACD,CAAC,CAAC;IAElC,OAAO,IAAIE,IAAI,CAAC,CAACP,EAAE,CAAC,EAAE;MAACQ,IAAI,EAAET;IAAU,CAAC,CAAC;EAE3C;EAGAU,MAAM;IACJ,MAAMC,OAAO,GAAG,IAAI,CAACtB,IAAI,CAACuB,KAAK;IAC/B,IAAI,CAAC5B,SAAS,CAAC0B,MAAM,CAACC,OAAO,EAAE,IAAI,CAACjB,IAAI,CAAC,CACtCmB,IAAI,CAAEC,MAAM,IAAG;MACd,IAAI,CAAC/B,MAAM,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EAEN;;AA3CWP,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAkC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV5BC,+BAA+C;MAAtBA;QAAA,OAAYC,YAAQ;MAAA,EAAC;MAE1CD,6BAAO;MAIKA,yBAAyC;MAC7CA,iBAAK;MAGTA,0BAAI;MACIA,uBAAO;MAAAA,iBAAK;MAChBA,0BAAI;MACAA,2BAAqD;MACzDA,iBAAK;MAGTA,2BAAI;MACIA,2BAAU;MAAAA,iBAAK;MACnBA,2BAAI;MACAA,+BAAmE;MACvEA,iBAAK;MAGTA,2BAAI;MAE+CA,qBAAI;MAAAA,iBAAS;MACxDA,kCAAsB;MAAAA,uBAAM;MAAAA,iBAAS;;;MA3B/CA,oCAAkB;MAMHA,eAAiB;MAAjBA,qDAAiB;MAoBAA,gBAAoB;MAApBA,uDAAoB","names":["UploadComponent","constructor","router","cameraSvc","fb","ngOnInit","imageData","navigate","form","group","title","control","complain","blob","dataURItoBlob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","upload","formVal","value","then","result","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\bingq\\src\\day37workshop\\client\\src\\app\\components\\upload.component.ts","C:\\Users\\bingq\\src\\day37workshop\\client\\src\\app\\components\\upload.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CameraService } from '../service/camera.service';\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css']\n})\nexport class UploadComponent implements OnInit {\n  imageData=\"\"\n  form!: FormGroup;\n  blob!: Blob\n\n  constructor(private router: Router, private cameraSvc: CameraService\n      , private fb: FormBuilder){}\n\n  ngOnInit(): void {\n    if(!this.cameraSvc.imageData){\n      this.router.navigate(['/'])\n      return\n    }\n    this.imageData = this.cameraSvc.imageData\n    this.form = this.fb.group({\n      title: this.fb.control<string>(''),\n      complain: this.fb.control<string>('')\n    })\n\n    this.blob = this.dataURItoBlob(this.imageData)\n\n  }\n\n  dataURItoBlob(dataURI: string){\n    var byteString = atob(dataURI.split(',')[1])\n    let mimeString = dataURI.split(',')[0].split(';')[0]\n    var ab = new ArrayBuffer(byteString.length)\n    var ia = new Uint8Array(ab)\n    for (var i = 0; i<byteString.length; i++)\n      ia[i] = byteString.charCodeAt(i)\n\n    return new Blob([ab], {type: mimeString})\n\n  }\n\n\n  upload(){\n    const formVal = this.form.value\n    this.cameraSvc.upload(formVal, this.blob)\n      .then((result)=>{\n        this.router.navigate(['/'])\n      })\n\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"upload()\">\n\n    <table>\n\n        <tr>\n            <td>\n                <img [src]=\"imageData\" class=\"thumbnail\">\n            </td>\n        </tr>\n\n        <tr>\n            <td>Title: </td>\n            <td>\n                <input type=\"text\" size=\"30\" formControlName=\"title\">\n            </td>\n        </tr>\n\n        <tr>\n            <td>Complain: </td>\n            <td>\n                <textarea cols=\"30\" rows=\"4\" formControlName=\"complain\"></textarea>\n            </td>\n        </tr>\n\n        <tr>\n            <td>\n                <button type=\"button\" [routerLink]=\"['/']\">Back</button>\n                <button type=\"submit\">Upload</button>\n            </td>\n        </tr>\n\n    </table>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}